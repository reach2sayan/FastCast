name: CMake
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++

          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++

          - os: windows-latest
            build_type: Release
            c_compiler: cl
            cpp_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build build-essential
            if [[ "${{ matrix.c_compiler }}" == "clang" ]]; then
              sudo apt-get install -y clang lld
            fi
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"' -y
            choco install ninja -y
          fi

      - name: Cache CMake files
        uses: actions/cache@v3
        with:
          path: |
            ~/.cmake
            ${{ github.workspace }}/build/CMakeCache.txt
            ${{ github.workspace }}/build/CMakeFiles
          key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "BUILD_DIR=${GITHUB_WORKSPACE}/build" >> $GITHUB_OUTPUT

      - name: Create build directory
        run: cmake -E make_directory ${{ steps.strings.outputs.build-output-dir }}

      - name: Configure CMake
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cmake -B "${{ steps.strings.outputs.BUILD_DIR }}" \
                  -DCMAKE_CXX_STANDARD=20 \
                  -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
                  -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -G Ninja \
                  -S ${{ github.workspace }}
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake -B "${{ steps.strings.outputs.BUILD_DIR }}" \
                  -DCMAKE_CXX_STANDARD=20 \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -G "Visual Studio 17 2022" \
                  -A x64 \
                  -S ${{ github.workspace }}
          fi

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.cpp', '**/*.hpp', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.BUILD_DIR }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.BUILD_DIR }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ${{ steps.strings.outputs.BUILD_DIR }}
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            .\tests.exe
          else
            ./tests
          fi

      - name: Run benchmarks
        working-directory: ${{ steps.strings.outputs.BUILD_DIR }}
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            .\measure.exe --benchmark_format=console --benchmark_out=benchmark_results.json
          else
            ./measure --benchmark_format=console --benchmark_out=benchmark_results.json
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.json